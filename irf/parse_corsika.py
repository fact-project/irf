import numpy as np


run_header_dtype = np.dtype([
    ('run_header', 'S4'),
    ('run_number', 'float32'),
    ('date', 'float32'),
    ('version', 'float32'),
    ('n_observation_levels', 'float32'),
    ('observation_height', 'float32', (10, )),
    ('energy_spectrum_slope', 'float32'),
    ('energy_min', 'float32'),
    ('energy_max', 'float32'),
    ('egs4_flag', 'float32'),
    ('nkg_flag', 'float32'),
    ('energy_cutoff_hadrons', 'float32'),
    ('energy_cutoff_muons', 'float32'),
    ('energy_cutoff_electrons', 'float32'),
    ('energy_cutoff_photons', 'float32'),
    ('physical_constants_and_interaction_flags', 'float32', (50, )),
    ('inclined_observation_plange_x', 'float32'),
    ('inclined_observation_plange_y', 'float32'),
    ('inclined_observation_plange_z', 'float32'),
    ('inclined_observation_plange_theta', 'float32'),
    ('inclined_observation_plange_phi', 'float32'),
    ('unused', 'float32', (14, )),
    ('n_showers', 'float32'),
    ('cka', 'float32', (40, )),
    ('ceta', 'float32', (5, )),
    ('cstrba', 'float32', (11, )),
    ('unused2', 'float32', (97, )),
    ('x_scatter', 'float32'),
    ('y_scatter', 'float32'),
    ('hlay', 'float32', (5, )),
    ('aatm', 'float32', (5, )),
    ('batm', 'float32', (5, )),
    ('catm', 'float32', (5, )),
    ('nflain', 'float32'),
    ('nfdif', 'float32'),
    ('nflpi0_100nflpif', 'float32'),
    ('nflche_100nfgragm', 'float32'),
])


event_header_dtype = np.dtype([
    ('event_header', 'S4'),
    ('event_number', 'float32'),
    ('particle_id', 'float32'),
    ('total_energy', 'float32'),
    ('starting_altitude', 'float32'),
    ('first_target_id', 'float32'),
    ('first_interaction_height', 'float32'),
    ('momentum_x', 'float32'),
    ('momentum_y', 'float32'),
    ('momentum_minus_z', 'float32'),
    ('zenith', 'float32'),
    ('azimuth', 'float32'),
    ('n_random_sequences', 'float32'),
    ('random_seeds', 'float32', (10, 3)),
    ('run_number', 'float32'),
    ('date', 'float32'),
    ('version', 'float32'),
    ('n_observation_levels', 'float32'),
    ('observation_height', 'float32', (10, )),
    ('energy_spectrum_slope', 'float32'),
    ('energy_min', 'float32'),
    ('energy_max', 'float32'),
    ('energy_cutoff_hadrons', 'float32'),
    ('energy_cutoff_muons', 'float32'),
    ('energy_cutoff_electrons', 'float32'),
    ('energy_cutoff_photons', 'float32'),
    ('nflain', 'float32'),
    ('nfdif', 'float32'),
    ('nflpi0', 'float32'),
    ('nflpif', 'float32'),
    ('nflche', 'float32'),
    ('nflfragm', 'float32'),
    ('earth_magnetic_field_x', 'float32'),
    ('earth_magnetic_field_z', 'float32'),
    ('egs4_flag', 'float32'),
    ('nkg_flag', 'float32'),
    ('low_energy_hadron_model', 'float32'),
    ('high_energy_hadron_model', 'float32'),
    ('cerenkov_flag', 'float32'),
    ('neutrino_flag', 'float32'),
    ('curved_flag', 'float32'),
    ('computer', 'float32'),
    ('theta_min', 'float32'),
    ('theta_max', 'float32'),
    ('phi_min', 'float32'),
    ('phi_max', 'float32'),
    ('cherenkov_bunch_size', 'float32'),
    ('n_cherenkov_detectors_x', 'float32'),
    ('n_cherenkov_detectors_y', 'float32'),
    ('cherenkov_detector_grid_spacing_x', 'float32'),
    ('cherenkov_detector_grid_spacing_y', 'float32'),
    ('cherenkov_detector_length_x', 'float32'),
    ('cherenkov_detector_length_y', 'float32'),
    ('cherenkov_output_flag', 'float32'),
    ('angle_array_x_magnetic_north', 'float32'),
    ('additional_muon_information_flag', 'float32'),
    ('egs4_multpliple_scattering_step_length_factor', 'float32'),
    ('cherenkov_wavelength_min', 'float32'),
    ('cherenkov_wavelength_max', 'float32'),
    ('n_reuse', 'float32'),
    ('reuse_x', 'float32', 20),
    ('reuse_y', 'float32', 20),
    ('sybill_interaction_flag', 'float32'),
    ('sybill_cross_section_flag', 'float32'),
    ('qgsjet_interaction_flag', 'float32'),
    ('qgsjet_cross_section_flag', 'float32'),
    ('dpmjet_interaction_flag', 'float32'),
    ('dpmjet_cross_section_flag', 'float32'),
    ('venus_nexus_epos_cross_section_flag', 'float32'),
    ('muon_multiple_scattering_flag', 'float32'),
    ('nkg_radial_distribution_range', 'float32'),
    ('undefined', 'float32', 126),
])


def parse_run_header(run_header_bytes):
    return np.frombuffer(run_header_bytes, dtype=run_header_dtype)


def parse_event_header(event_header_bytes):
    return np.frombuffer(event_header_bytes, dtype=event_header_dtype)
